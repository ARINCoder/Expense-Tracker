// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Expense {
  id            Int      @id @default(autoincrement())
  // categoryId Int
  category      String
  // category   Category @relation(fields: [categoryId], references: [id], name: "ExpensesOnCategory")
  paymentOption String
  product       String
  amount        Int
  date          DateTime @default(now())
  description   String
}

// model Category {
//   id       Int       @id @default(autoincrement())
//   name     String    @unique
//   expenses Expense[] @relation(name: "ExpensesOnCategory")
//   Income   Income[]  @relation(name: "IncomeOnCategory")
// }

model Users {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstname String?
  lastname  String?
  Income    Income[]
  // Income    Income[]
}

model Income {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        Users    @relation(fields: [userId], references: [id])
  // categoryId Int
  // category    String
  // category   Category @relation(fields: [categoryId], references: [id], name: "IncomeOnCategory")
  source      String // Renamed for clarity
  amount      Float // Assuming amount is a decimal value
  date        DateTime @default(now())
  description String
  // Users       Users?   @relation(fields: [usersId], references: [id])
  // usersId     String?
}

//Haven't created this.
model Budget {
  id        Int      @id @default(autoincrement())
  category  String // Category for the budget (e.g., "Groceries," "Entertainment")
  amount    Float // Total amount allocated for the budget
  remaining Float? // Optional field to track remaining balance
  date      DateTime @default(now())
}

//Haven't Created this
model Transaction {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @default(0)
  isIncome    Boolean  @default(false)
  date        DateTime @default(now())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  incomeId    Int
  expenseId   Int
}
